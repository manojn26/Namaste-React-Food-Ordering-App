5. Talk is cheap, show me the code :-
---------------------------------------

Comments :-
{
    //Single line Comments

    /*
    Multine line comment 
    /*
}

JSX is not mandatory.
Typescript is not mandatory
ES6 is not mandatory



JSX can only have parent element.
If we put more than one line in compoent, we hvae to wrap that in <div>
But if you dont want that, we use <React.Fragment>
<React.Fragment> comes from React.
<React.Fragment> is like a empty tag.

Instead of React.Fragment we can write <></>
<></> -> also called React.Fragment



NEVER EVER WRITE CODE WITHOUT PLANNING

React.Fragment :-
------------------
Is a Component exported by React.


Props :-
---------
Pass data through the Components.
Props - Properties

At the end of the day our functional Component is function.

function  fn(parsms){}
fn(args)


Without Destruturing :
------------------------
const Restraunt = (props)=>{
    {props.restraunt.data}
}

With Destruturing :
------------------------
const Restraunt = ({restraunt})=>{
    {props.restraunt.data}
}


<Restraunt restraunt />

Virtual DOM :-
---------------
<head>
    <body>
        <Restraunt1>
        <Restraunt2>
            <img/>
        <Restraunt3>
    </body>
</head>

-> Virtual DOM is not just a concept of React.
-> We keep a represntaton of DOM with us is known as Virtual DOM.
-> Why do we need
    - Reconciliation : 
            - is an algorithm react uses, diff algorith. to differentiate one tree from another
            - it determines what needs to change an UI, what doesnot needs change an UI
            - It doesnto reredner entire application, it will update particular piece of UI.
            it uses keys for differentiates
            - If tags are differntes it uniquely identifies.
            - But if multiple same tags, we need pass unique keys, re render everything.

HW :
    Virtual DOM
    Reconciliation
    diff algorithm
    React Fiber (new Reconciliation engine came in React 16)

-> Usually we render data from Array, we can't use key as index.


Congif Driven UI :
config driven UI; baceknd should control our data


6. Let's get Hooked :-
-----------------------
It is not necessory to any folder in our project.
But we need to wrap our code proper folder structire, that gives us better modular approach,

Two ways of exporting :-
------------------------------
export default Name;
import Name from ".../" :- Default import 

-> We cant export two or more things in default.
-> We can export only one thing in default.

export const Title = ()=>{} :- Named export
import {Title} from "../" :- Named import

export { Title }
import { Title } from "../"

export { Name1, Name2 }
import { Name1, Name2 } from "../"

export const Title = ()=>{}
export const Header = ()=>{}
import * as obj from "../"


Filenames :-
.jsx -> its because of the file contains jsx code.
We can use .jsx or .js and .ts or .tsx


When importing we can write file-extensions also.

constants.js:-
------------
Put all your hard coded things.

Input :-
--------
When we write input tag in HTML it will work normally.
But It wont work in React.

React uses one way data binding.

Whenever we need to change value in React, we need to use useState()

useState() :-
    - It returns an Array.
    - first value of the Array is variable.
    - If you want to modify the variable, you directly cant modify it.
    - We can modify that variable using function.

    - second value of the Array is function.
    - this function is used to modify the variable.

    - Now we make two way binding with these concept.

    Why do we need state variables :-
        - Every time we want our variables with sync with UI.
        - React keeps tracking the variables.

    useState() -> returns [variable name, function to update the variable]
    

- In React input doesnot work like HTML
- When we write input we need to do data  binding to it.


Hooks :-
    - Hooks are nothing its a javascript function at the end of the day.
    - These Hooks are written by Facebook Developers, The Hooks are gave some functionalities.


08 - Exploring The World :-
-----------------------------
React is very fast because of VirtualDOM, Reconciliation, Diff algorithm.

Our HTML will be in TreeStructure, 
    In React it will be in VirtualDOM.
        Whenever any changes happened in Nodes, It re-renders the TreeStructure.

    VirtualDOM :
         - Representaion of DOM
         - At the end of the day, it is kind of like Javascript Object.
         - It makes Fast DOM Manipulation. (It uses React Fiber(Diff Algorithm))
         - 

When state variables got updated, it re-renders the entire component.

Microservices :-
-----------------

Monolith :
    When developing a application on old days, it will be single big application.

The world moving towards Microservices.

Microservices :
    Instead of having one big project.
    We have small small projects.

    Advantages :
        - Easy to maintain.    

Our Project is  - UI Microservice


Calling API :-
--------------
1. Loads => API call => render page
             (300 ms)       (500 ms)

2. Loads => render => API => Update UI
    - second one is best, because of user experience.
    - we can achieve this process using useEffect()


useEffect() :-
--------------

useEffect is called after the component is rendered.

inside useEffect we need pass callback function and dependency array.

    - the callback function is called, whenever the useEffect is called
    - it will be called every re-render, but we dont want this thing.
    - if we dont want to call it after re-render pass it dependency array.

    - we can control our useEffect by using dependency array, when dependency array value got changes the useEffect will be executed.

    Empty Dependency - once after render
    Dependency Array - once after initial render + everytime after render


Browser blocking for talk with Swiggy.
use cors chromes plugin.

Shimmer Effect - Show empty skeloton for UI before loading the API data on users browsers.

Conditional Rendering :-
-------------------------

JSX :-
--------
{
    Javascript expressions will work on JSX
    But statements will not work
}

React Native uses same Diff Algorithm as React.


09. Finding the Path :-
------------------------
Don't create component inside component.
Dont write useState inside if() condition.
Dont write useState inside loops.

useState :-
    - useState is a Hook that react gives to create local state variables inside function compoents.
    - never use a useState outside in our functional compoent.

we can create more than one useEffect in our component

useEffect :
    - if we dont pass dependency array it will be execute every render
    - if empty dependency array it will be execute once on initial render
    - if we pass state variable to dependency array it will execute whenever the state variable got changed.


Routing :-
-----------
react-router
npm i react-router-dom

SPA : Single Page Application :-
--------------------------------
It dont make networks call to fetch the pages.

Two types of routing :-
    -> client side routing
    -> server side routing

    - server side routing :
        All our pages coming from server.
    
dynamic routing


10. Lets get Classy :-
-----------------------

Class Based Components :-
--------------------------
When react started the concept of components starts with Class Based.
Earlier React uses just only Class Based Components.
There is no functional components.
There is not concept of Hooks.

In Earlier it will bit very painful to write code.
But it do some magicl stuff also on that time, because on that time peoples are coming from Jquery it seems very Easy to most of the people.

NOTE :
    Class Based Components are no longer used.

We can do almost everything using function based components.


functional components are at the end of the day is functions.
Class based components are at the end of the day is Class.


- render() method is very important in Class based component.

Every Class is a Life Cycle.
    - first constructor is called.
    - then component is rendered.
    - componentDidMount

Where do we call API in Class Component :-
    we can call API componentDidMount()

Exeuting step by step :
constructor
render from class component
componentDidMount

Child and Parent :- (Child - Profile & Parent - About)
-------------------
About Component Contructor
About Component Render
Profile Component Constructor
Profile Component Render
Profile Component Did Mount
About Component Did Mount

Mount : means Loads

-> When React is rendering things up, it does it in two phases
    1. first phase is render 
    2. second phase is commit 

  -> React first of all finishes the render phase.
        - in render phase constructor is called and render method is called.

  -> commit phase is the place where the React is actually modifying our DOM.
  -> componentDidMount is done after updating our DOM.


We can use async for componentDidMount.
We cant use async for useEffect.

/*
    Parent Constrcutor
    Parent Render
        First Child Constructor
        First Child Render
        Second Child Constructor
        Second Child Render
        First Child Component Did Mount
        Second Child Component Did Mount
    Parent Component Did Mount 
 
*/

Re-render Cycle is known as Updating.


componentDidMount -> is called after first render
componentDidUpdate -> after updating the DOM
componentWillUnmount -> go to anther page

React is single page application(SPA).
In a component you will make an setIntervall() it will be called on every component. 
You need clear the interval on componentWillUnmount()


Never ever compare react Life Cycle methods to functional component.

useEffect will be called each and every render.
after first render componentDidMount is called.
    after every subsequent render it is updated.

    

11. Optimizing our App :-
---------------------------
Code splitting, lazy loading, building own Hook.

when we splitting our code :
    - readibality
    - maintainability
    - easy debugging
    - testables

Hooks are at the end of the day its a functions.

Why should we even build hooks ?
    - reusability
    - readibality
    - speration of concerns
    - maintainability
    - modularity - broken down code into meaningfull pieces
    - we can wrap up small logic, we can use it wherever we want.

- Hooks are starts with "use"



lazy() importing :-
    Chunking
    Code splitting
    Dynamic Bundling
    Lazy loading
    Ondemand loading
    Dynamic import

NOTE :
    - Never ever dynamically load your component inside another component.
    - lazy load on top of the Component.
    

12. Jo dikhta hai vo bikta hai :-
-----------------------------------
Meaning : What you see is that what sells.

- How to write CSS in our projects.
    - style sheet, style.css (basic way)

Various ways to write CSS.
    - SCSS (SASS)
    - inline
    - libraries : MaterialUI, BaseUI, Ant, Chakra
    - styled components

Good practice to use single framework and single libraries.

Disadvantages :
- Bundle size makes heavy
- loose over control



Tailwind CSS :-
---------------
Tailwind comes with mix of things.

    - Write CSS on the go (in the same file)
    - reusability
    - comes with lots of prebuilt classes
    - less bundle size
    - flexible UI (we can customizable)

Every styles that we put in it all are class names.

Instalation Guide for Parcel :-
--------------------------------
npm install -D tailwindcss postcss
npx tailwindcss init 

npm -> is to installing the packages
npx -> is to execute tha packages directly

postcss :
    - is a tool for tranforming CSS with Javascript
    - 


w-[250px] -> use this syntax for custom values.

